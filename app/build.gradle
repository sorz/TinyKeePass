apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'org.mozilla.rust-android-gradle.rust-android'

android {
    compileSdkVersion 31
    buildToolsVersion '30.0.2'
    defaultConfig {
        applicationId "org.sorz.lab.tinykeepass"
        minSdkVersion 28
        targetSdkVersion 31
        versionCode 14
        versionName "0.4.0"
        resConfigs "en", "pt", 'zh-rCN'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    ndkVersion "22.1.7171670"
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        checkReleaseBuilds false
    }
    buildFeatures{
        compose true
    }
    composeOptions {
        kotlinCompilerVersion "$kotlin_version"
        kotlinCompilerExtensionVersion "$compose_version"
    }
}

dependencies {
    def activity_version = "1.4.0-beta01"
    def ktor_version = "1.6.3"

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // package name is still com.kunzisoft.keepass
    implementation('com.github.sorz:KeePassDX:0382e95b22') {
        exclude module: 'icon-pack-material'
    }

    // Ktor
    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-auth:$ktor_version"

    // Jetpack
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.biometric:biometric-ktx:1.2.0-alpha03'
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation "androidx.autofill:autofill:1.1.0"

    // Jetpack Datastore
    implementation "androidx.datastore:datastore:1.0.0"
    implementation "com.google.protobuf:protobuf-javalite:3.10.0"

    // Jetpack Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Jetpack Activity
    implementation("androidx.activity:activity-ktx:$activity_version")
    implementation("androidx.activity:activity-compose:$activity_version")

    // Compose UI
    implementation "androidx.compose.compiler:compiler:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-viewbinding:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "com.google.android.material:compose-theme-adapter:1.0.3"
    implementation "com.google.accompanist:accompanist-permissions:0.18.0"

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
repositories {
    mavenCentral()
}
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}
kapt {
    correctErrorTypes true
}
cargo {
    module  = "../rust"
    libname = "kdbx"
    targets = ["arm64"]
}
tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}